#include <iostream>

#include <bits/stdc++.h>

using namespace std;





bool notassigned(int matrix[9][9], int &row, int &col);

bool issafe(int matrix[9][9], int row, int col, int num);

bool saferow(int matrix[9][9], int row, int num){
   
 for (int col = 0; col < 9; col++){
   
     if(matrix[row][col] == num) return true;
    }
 
   return false;

}



bool safecol(int matrix[9][9], int col, int num){
  
  for (int row = 0; row < 9; row++){
     
   if(matrix[row][col] == num) return true;
  
  }
   
 return false;

}



bool safebox(int matrix[9][9], int row_start, int col_start, int num){
  
  for(int row =0 ; row < 3; row++){
     
   for(int col = 0; col <3; col++){
       
     if(matrix[row + row_start][col + col_start] ==  num) return true;
  
      }
    }
  
  return false;

}




bool issafe(int matrix[9][9], int row, int col, int num)
{
   
 return !safebox(matrix, row- row%3, col-col%3, num) && !safecol(matrix, col, num) && !saferow(matrix, row, num);

}



// using & so that its value also gets updated




bool solve(int matrix[9][9]){
 
   int row;
   
 int col;
   
 // x = row, y = column
   
 if(!notassigned(matrix,row,col)) return true;
  
  int c;
   
 for(int num = 1; num<=9; num++){
     
   if(issafe(matrix, row,col, num)){
     
       c =  num;
       
     matrix[row][col] = c;
    
        if(solve(matrix)) return true;
         
   matrix[row][col] = 0;
   
     }
    }
    
return false;
   
 
}

bool notassigned(int matrix[9][9], int &row, int &col){
  
  for(row=0; row <9; row++)
    {
    
    for(col = 0; col < 9; col++)
        {
       
     if(matrix[row][col] == 0)  return true;
    
    }
    }
  
  return false;

}



int main() {
	
// your code goes here
	

int matrix[9][9] = {{2,0,0,0,0,1,0,3,8},{0,0,0,0,0,0,0,0,5},{0,7,0,0,0,6,0,0,0},{0,0,0,0,0,0,0,1,3},{0,9,8,1,0,0,2,5,7},{3,1,0,0,0,0,8,0,0},{9,0,0,8,0,0,0,2,0},{0,5,0,0,6,9,7,8,4},{4,0,0,2,5,0,0,0,0}};
	

if (solve(matrix)){
	 
   for(int i =0; i < 9; i++){
	    
    for(int j = 0; j < 9; j++){
	      
      cout << matrix[i][j] << " ";
	 
       }
	       
 cout << endl;
	  
  }
	}
	
else cout << "not possible" << endl;

	return 0;

}